from typing import List

class FoodItem:
    def __init__(self, name: str, quantity: int, unit: str, expiry_date: str, category: str):
        self.name = name
        self.quantity = quantity
        self.unit = unit
        self.expiry_date = expiry_date
        self.category = category

class Pantry:
    def __init__(self, name: str, location: str, inventory: List[FoodItem]):
        self.name = name
        self.location = location
        self.inventory = inventory

    def add_item(self, item: FoodItem):
        self.inventory.append(item)

    def remove_item(self, item_name: str, quantity: int):
        for i, item in enumerate(self.inventory):
            if item.name == item_name and item.quantity >= quantity:
                self.inventory[i].quantity -= quantity
                return True
        return False

    def get_inventory(self):
        return self.inventory

class User:
    def __init__(self, name: str, location: str, needs: List[str]):
        self.name = name
        self.location = location
        self.needs = needs

    def add_need(self, need: str):
        self.needs.append(need)

    def remove_need(self, need: str):
        if need in self.needs:
            self.needs.remove(need)

    def get_needs(self):
        return self.needs

class FoodBank:
    def __init__(self, pantries: List[Pantry]):
        self.pantries = pantries

    def add_pantry(self, pantry: Pantry):
        self.pantries.append(pantry)

    def remove_pantry(self, pantry_name: str):
        for i, pantry in enumerate(self.pantries):
            if pantry.name == pantry_name:
                del self.pantries[i]
                return True
        return False

    def find_pantry(self, location: str, needs: List[str]):
        for pantry in self.pantries:
            if pantry.location == location:
                for need in needs:
                    for item in pantry.inventory:
                        if need == item.name:
                            return pantry
        return None

    def get_pantries(self):
        return self.pantries